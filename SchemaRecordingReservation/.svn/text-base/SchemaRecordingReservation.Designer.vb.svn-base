'------------------------------------------------------------------------------
' <auto-generated>
'     このコードはツールによって生成されました。
'     ランタイム バージョン:2.0.50727.4016
'
'     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
'     コードが再生成されるときに損失したりします。
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("SchemaRecordingReservation"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class SchemaRecordingReservation
    Inherits Global.System.Data.DataSet
    
    Private tableT_RESERVATION As T_RESERVATIONDataTable
    
    Private tableT_LOG As T_LOGDataTable
    
    Private tableM_SETTING As M_SETTINGDataTable
    
    Private tableM_DEVICE As M_DEVICEDataTable
    
    Private tableM_STATION As M_STATIONDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("T_RESERVATION")) Is Nothing) Then
                MyBase.Tables.Add(New T_RESERVATIONDataTable(ds.Tables("T_RESERVATION")))
            End If
            If (Not (ds.Tables("T_LOG")) Is Nothing) Then
                MyBase.Tables.Add(New T_LOGDataTable(ds.Tables("T_LOG")))
            End If
            If (Not (ds.Tables("M_SETTING")) Is Nothing) Then
                MyBase.Tables.Add(New M_SETTINGDataTable(ds.Tables("M_SETTING")))
            End If
            If (Not (ds.Tables("M_DEVICE")) Is Nothing) Then
                MyBase.Tables.Add(New M_DEVICEDataTable(ds.Tables("M_DEVICE")))
            End If
            If (Not (ds.Tables("M_STATION")) Is Nothing) Then
                MyBase.Tables.Add(New M_STATIONDataTable(ds.Tables("M_STATION")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property T_RESERVATION() As T_RESERVATIONDataTable
        Get
            Return Me.tableT_RESERVATION
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property T_LOG() As T_LOGDataTable
        Get
            Return Me.tableT_LOG
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property M_SETTING() As M_SETTINGDataTable
        Get
            Return Me.tableM_SETTING
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property M_DEVICE() As M_DEVICEDataTable
        Get
            Return Me.tableM_DEVICE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property M_STATION() As M_STATIONDataTable
        Get
            Return Me.tableM_STATION
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As SchemaRecordingReservation = CType(MyBase.Clone,SchemaRecordingReservation)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("T_RESERVATION")) Is Nothing) Then
                MyBase.Tables.Add(New T_RESERVATIONDataTable(ds.Tables("T_RESERVATION")))
            End If
            If (Not (ds.Tables("T_LOG")) Is Nothing) Then
                MyBase.Tables.Add(New T_LOGDataTable(ds.Tables("T_LOG")))
            End If
            If (Not (ds.Tables("M_SETTING")) Is Nothing) Then
                MyBase.Tables.Add(New M_SETTINGDataTable(ds.Tables("M_SETTING")))
            End If
            If (Not (ds.Tables("M_DEVICE")) Is Nothing) Then
                MyBase.Tables.Add(New M_DEVICEDataTable(ds.Tables("M_DEVICE")))
            End If
            If (Not (ds.Tables("M_STATION")) Is Nothing) Then
                MyBase.Tables.Add(New M_STATIONDataTable(ds.Tables("M_STATION")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableT_RESERVATION = CType(MyBase.Tables("T_RESERVATION"),T_RESERVATIONDataTable)
        If (initTable = true) Then
            If (Not (Me.tableT_RESERVATION) Is Nothing) Then
                Me.tableT_RESERVATION.InitVars
            End If
        End If
        Me.tableT_LOG = CType(MyBase.Tables("T_LOG"),T_LOGDataTable)
        If (initTable = true) Then
            If (Not (Me.tableT_LOG) Is Nothing) Then
                Me.tableT_LOG.InitVars
            End If
        End If
        Me.tableM_SETTING = CType(MyBase.Tables("M_SETTING"),M_SETTINGDataTable)
        If (initTable = true) Then
            If (Not (Me.tableM_SETTING) Is Nothing) Then
                Me.tableM_SETTING.InitVars
            End If
        End If
        Me.tableM_DEVICE = CType(MyBase.Tables("M_DEVICE"),M_DEVICEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableM_DEVICE) Is Nothing) Then
                Me.tableM_DEVICE.InitVars
            End If
        End If
        Me.tableM_STATION = CType(MyBase.Tables("M_STATION"),M_STATIONDataTable)
        If (initTable = true) Then
            If (Not (Me.tableM_STATION) Is Nothing) Then
                Me.tableM_STATION.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "SchemaRecordingReservation"
        Me.Prefix = ""
        Me.Locale = New Global.System.Globalization.CultureInfo("ja-JP")
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableT_RESERVATION = New T_RESERVATIONDataTable
        MyBase.Tables.Add(Me.tableT_RESERVATION)
        Me.tableT_LOG = New T_LOGDataTable
        MyBase.Tables.Add(Me.tableT_LOG)
        Me.tableM_SETTING = New M_SETTINGDataTable
        MyBase.Tables.Add(Me.tableM_SETTING)
        Me.tableM_DEVICE = New M_DEVICEDataTable
        MyBase.Tables.Add(Me.tableM_DEVICE)
        Me.tableM_STATION = New M_STATIONDataTable
        MyBase.Tables.Add(Me.tableM_STATION)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeT_RESERVATION() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeT_LOG() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeM_SETTING() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeM_DEVICE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeM_STATION() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As SchemaRecordingReservation = New SchemaRecordingReservation
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub T_RESERVATIONRowChangeEventHandler(ByVal sender As Object, ByVal e As T_RESERVATIONRowChangeEvent)
    
    Public Delegate Sub T_LOGRowChangeEventHandler(ByVal sender As Object, ByVal e As T_LOGRowChangeEvent)
    
    Public Delegate Sub M_SETTINGRowChangeEventHandler(ByVal sender As Object, ByVal e As M_SETTINGRowChangeEvent)
    
    Public Delegate Sub M_DEVICERowChangeEventHandler(ByVal sender As Object, ByVal e As M_DEVICERowChangeEvent)
    
    Public Delegate Sub M_STATIONRowChangeEventHandler(ByVal sender As Object, ByVal e As M_STATIONRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class T_RESERVATIONDataTable
        Inherits Global.System.Data.TypedTableBase(Of T_RESERVATIONRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnDLL_NAME As Global.System.Data.DataColumn
        
        Private columnBROADCAST_TYPE As Global.System.Data.DataColumn
        
        Private columnSTATION As Global.System.Data.DataColumn
        
        Private columnSTATION_NAME As Global.System.Data.DataColumn
        
        Private columnCHANNEL As Global.System.Data.DataColumn
        
        Private columnSERVICE_ID As Global.System.Data.DataColumn
        
        Private columnSTART_YYYYMMDDHHMM As Global.System.Data.DataColumn
        
        Private columnSTART_DISP As Global.System.Data.DataColumn
        
        Private columnEND_YYYYMMDDHHMM As Global.System.Data.DataColumn
        
        Private columnEND_DISP As Global.System.Data.DataColumn
        
        Private columnPROGRAM_TITLE As Global.System.Data.DataColumn
        
        Private columnPROGRAM_SUBTITLE As Global.System.Data.DataColumn
        
        Private columnEXTEND As Global.System.Data.DataColumn
        
        Private columnPERFORMER As Global.System.Data.DataColumn
        
        Private columnGENRE As Global.System.Data.DataColumn
        
        Private columnSUBGENRE As Global.System.Data.DataColumn
        
        Private columnNOTE As Global.System.Data.DataColumn
        
        Private columnRECORDED As Global.System.Data.DataColumn
        
        Private columnOUTPUT_ERRORLOG As Global.System.Data.DataColumn
        
        Private columnEXIT_APPLICATION_AFTER_RECORDING As Global.System.Data.DataColumn
        
        Private columnPREVIEW As Global.System.Data.DataColumn
        
        Private columnSUSPEND_AFTER_RECORDING As Global.System.Data.DataColumn
        
        Private columnPATH As Global.System.Data.DataColumn
        
        Private columnCLIENT_PC_NAME As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "T_RESERVATION"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DLL_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDLL_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BROADCAST_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBROADCAST_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STATIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTATION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STATION_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTATION_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CHANNELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCHANNEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SERVICE_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSERVICE_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property START_YYYYMMDDHHMMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTART_YYYYMMDDHHMM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property START_DISPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTART_DISP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property END_YYYYMMDDHHMMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEND_YYYYMMDDHHMM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property END_DISPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEND_DISP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROGRAM_TITLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROGRAM_TITLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROGRAM_SUBTITLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROGRAM_SUBTITLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EXTENDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXTEND
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PERFORMERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPERFORMER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GENREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGENRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUBGENREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUBGENRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RECORDEDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECORDED
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OUTPUT_ERRORLOGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOUTPUT_ERRORLOG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EXIT_APPLICATION_AFTER_RECORDINGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXIT_APPLICATION_AFTER_RECORDING
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PREVIEWColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPREVIEW
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUSPEND_AFTER_RECORDINGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUSPEND_AFTER_RECORDING
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PATHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPATH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENT_PC_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENT_PC_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As T_RESERVATIONRow
            Get
                Return CType(Me.Rows(index),T_RESERVATIONRow)
            End Get
        End Property
        
        Public Event T_RESERVATIONRowChanging As T_RESERVATIONRowChangeEventHandler
        
        Public Event T_RESERVATIONRowChanged As T_RESERVATIONRowChangeEventHandler
        
        Public Event T_RESERVATIONRowDeleting As T_RESERVATIONRowChangeEventHandler
        
        Public Event T_RESERVATIONRowDeleted As T_RESERVATIONRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddT_RESERVATIONRow(ByVal row As T_RESERVATIONRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddT_RESERVATIONRow( _
                    ByVal ID As Long,  _
                    ByVal DLL_NAME As String,  _
                    ByVal BROADCAST_TYPE As Long,  _
                    ByVal STATION As String,  _
                    ByVal STATION_NAME As String,  _
                    ByVal CHANNEL As Long,  _
                    ByVal SERVICE_ID As Long,  _
                    ByVal START_YYYYMMDDHHMM As String,  _
                    ByVal START_DISP As String,  _
                    ByVal END_YYYYMMDDHHMM As String,  _
                    ByVal END_DISP As String,  _
                    ByVal PROGRAM_TITLE As String,  _
                    ByVal PROGRAM_SUBTITLE As String,  _
                    ByVal EXTEND As Long,  _
                    ByVal PERFORMER As String,  _
                    ByVal GENRE As Long,  _
                    ByVal SUBGENRE As Long,  _
                    ByVal NOTE As String,  _
                    ByVal RECORDED As Long,  _
                    ByVal OUTPUT_ERRORLOG As Long,  _
                    ByVal EXIT_APPLICATION_AFTER_RECORDING As Long,  _
                    ByVal PREVIEW As Long,  _
                    ByVal SUSPEND_AFTER_RECORDING As Long,  _
                    ByVal PATH As String,  _
                    ByVal CLIENT_PC_NAME As String) As T_RESERVATIONRow
            Dim rowT_RESERVATIONRow As T_RESERVATIONRow = CType(Me.NewRow,T_RESERVATIONRow)
            Dim columnValuesArray() As Object = New Object() {ID, DLL_NAME, BROADCAST_TYPE, STATION, STATION_NAME, CHANNEL, SERVICE_ID, START_YYYYMMDDHHMM, START_DISP, END_YYYYMMDDHHMM, END_DISP, PROGRAM_TITLE, PROGRAM_SUBTITLE, EXTEND, PERFORMER, GENRE, SUBGENRE, NOTE, RECORDED, OUTPUT_ERRORLOG, EXIT_APPLICATION_AFTER_RECORDING, PREVIEW, SUSPEND_AFTER_RECORDING, PATH, CLIENT_PC_NAME}
            rowT_RESERVATIONRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowT_RESERVATIONRow)
            Return rowT_RESERVATIONRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As T_RESERVATIONDataTable = CType(MyBase.Clone,T_RESERVATIONDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New T_RESERVATIONDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnDLL_NAME = MyBase.Columns("DLL_NAME")
            Me.columnBROADCAST_TYPE = MyBase.Columns("BROADCAST_TYPE")
            Me.columnSTATION = MyBase.Columns("STATION")
            Me.columnSTATION_NAME = MyBase.Columns("STATION_NAME")
            Me.columnCHANNEL = MyBase.Columns("CHANNEL")
            Me.columnSERVICE_ID = MyBase.Columns("SERVICE_ID")
            Me.columnSTART_YYYYMMDDHHMM = MyBase.Columns("START_YYYYMMDDHHMM")
            Me.columnSTART_DISP = MyBase.Columns("START_DISP")
            Me.columnEND_YYYYMMDDHHMM = MyBase.Columns("END_YYYYMMDDHHMM")
            Me.columnEND_DISP = MyBase.Columns("END_DISP")
            Me.columnPROGRAM_TITLE = MyBase.Columns("PROGRAM_TITLE")
            Me.columnPROGRAM_SUBTITLE = MyBase.Columns("PROGRAM_SUBTITLE")
            Me.columnEXTEND = MyBase.Columns("EXTEND")
            Me.columnPERFORMER = MyBase.Columns("PERFORMER")
            Me.columnGENRE = MyBase.Columns("GENRE")
            Me.columnSUBGENRE = MyBase.Columns("SUBGENRE")
            Me.columnNOTE = MyBase.Columns("NOTE")
            Me.columnRECORDED = MyBase.Columns("RECORDED")
            Me.columnOUTPUT_ERRORLOG = MyBase.Columns("OUTPUT_ERRORLOG")
            Me.columnEXIT_APPLICATION_AFTER_RECORDING = MyBase.Columns("EXIT_APPLICATION_AFTER_RECORDING")
            Me.columnPREVIEW = MyBase.Columns("PREVIEW")
            Me.columnSUSPEND_AFTER_RECORDING = MyBase.Columns("SUSPEND_AFTER_RECORDING")
            Me.columnPATH = MyBase.Columns("PATH")
            Me.columnCLIENT_PC_NAME = MyBase.Columns("CLIENT_PC_NAME")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnDLL_NAME = New Global.System.Data.DataColumn("DLL_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDLL_NAME)
            Me.columnBROADCAST_TYPE = New Global.System.Data.DataColumn("BROADCAST_TYPE", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBROADCAST_TYPE)
            Me.columnSTATION = New Global.System.Data.DataColumn("STATION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTATION)
            Me.columnSTATION_NAME = New Global.System.Data.DataColumn("STATION_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTATION_NAME)
            Me.columnCHANNEL = New Global.System.Data.DataColumn("CHANNEL", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCHANNEL)
            Me.columnSERVICE_ID = New Global.System.Data.DataColumn("SERVICE_ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSERVICE_ID)
            Me.columnSTART_YYYYMMDDHHMM = New Global.System.Data.DataColumn("START_YYYYMMDDHHMM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTART_YYYYMMDDHHMM)
            Me.columnSTART_DISP = New Global.System.Data.DataColumn("START_DISP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTART_DISP)
            Me.columnEND_YYYYMMDDHHMM = New Global.System.Data.DataColumn("END_YYYYMMDDHHMM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEND_YYYYMMDDHHMM)
            Me.columnEND_DISP = New Global.System.Data.DataColumn("END_DISP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEND_DISP)
            Me.columnPROGRAM_TITLE = New Global.System.Data.DataColumn("PROGRAM_TITLE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROGRAM_TITLE)
            Me.columnPROGRAM_SUBTITLE = New Global.System.Data.DataColumn("PROGRAM_SUBTITLE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROGRAM_SUBTITLE)
            Me.columnEXTEND = New Global.System.Data.DataColumn("EXTEND", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXTEND)
            Me.columnPERFORMER = New Global.System.Data.DataColumn("PERFORMER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPERFORMER)
            Me.columnGENRE = New Global.System.Data.DataColumn("GENRE", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGENRE)
            Me.columnSUBGENRE = New Global.System.Data.DataColumn("SUBGENRE", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUBGENRE)
            Me.columnNOTE = New Global.System.Data.DataColumn("NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOTE)
            Me.columnRECORDED = New Global.System.Data.DataColumn("RECORDED", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECORDED)
            Me.columnOUTPUT_ERRORLOG = New Global.System.Data.DataColumn("OUTPUT_ERRORLOG", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOUTPUT_ERRORLOG)
            Me.columnEXIT_APPLICATION_AFTER_RECORDING = New Global.System.Data.DataColumn("EXIT_APPLICATION_AFTER_RECORDING", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXIT_APPLICATION_AFTER_RECORDING)
            Me.columnPREVIEW = New Global.System.Data.DataColumn("PREVIEW", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPREVIEW)
            Me.columnSUSPEND_AFTER_RECORDING = New Global.System.Data.DataColumn("SUSPEND_AFTER_RECORDING", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUSPEND_AFTER_RECORDING)
            Me.columnPATH = New Global.System.Data.DataColumn("PATH", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPATH)
            Me.columnCLIENT_PC_NAME = New Global.System.Data.DataColumn("CLIENT_PC_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENT_PC_NAME)
            Me.columnID.Caption = "ＩＤ;False;"
            Me.columnDLL_NAME.Caption = "DLL名;False;"
            Me.columnBROADCAST_TYPE.Caption = "ブロードキャストタイプ;False;"
            Me.columnSTATION.Caption = "放送局;True;"
            Me.columnSTATION_NAME.Caption = "放送局名;True;"
            Me.columnCHANNEL.Caption = "チャンネル;True;"
            Me.columnSERVICE_ID.Caption = "サブch;True;"
            Me.columnSTART_YYYYMMDDHHMM.Caption = "開始時間;False;"
            Me.columnSTART_DISP.Caption = "開始時間;True;SUBSTRING(START_YYYYMMDDHHMM,1,4)+'/'+SUBSTRING(START_YYYYMMDDHHMM,5,2)"& _ 
                "+'/'+SUBSTRING(START_YYYYMMDDHHMM,7,2)+' '+SUBSTRING(START_YYYYMMDDHHMM,9,2)+':'"& _ 
                "+SUBSTRING(START_YYYYMMDDHHMM,11,2)"
            Me.columnEND_YYYYMMDDHHMM.Caption = "終了時間;False;"
            Me.columnEND_DISP.Caption = "終了時間;True;SUBSTRING(END_YYYYMMDDHHMM,1,4)+'/'+SUBSTRING(END_YYYYMMDDHHMM,5,2)+'/'"& _ 
                "+SUBSTRING(END_YYYYMMDDHHMM,7,2)+' '+SUBSTRING(END_YYYYMMDDHHMM,9,2)+':'+SUBSTRI"& _ 
                "NG(END_YYYYMMDDHHMM,11,2)"
            Me.columnPROGRAM_TITLE.Caption = "番組タイトル;True;"
            Me.columnPROGRAM_SUBTITLE.Caption = "番組サブタイトル;True;"
            Me.columnEXTEND.Caption = "エクステンド;False;"
            Me.columnPERFORMER.Caption = "出演者;True;"
            Me.columnGENRE.Caption = "ジャンル;False;"
            Me.columnSUBGENRE.Caption = "サブジャンル;False;"
            Me.columnNOTE.Caption = "内容;True;"
            Me.columnRECORDED.Caption = "録画済;False;"
            Me.columnOUTPUT_ERRORLOG.Caption = "ログ出力;False;"
            Me.columnEXIT_APPLICATION_AFTER_RECORDING.Caption = "EXE終了;False;"
            Me.columnPREVIEW.Caption = "プレビュー表示;False;"
            Me.columnSUSPEND_AFTER_RECORDING.Caption = "サスペンド;False;"
            Me.columnPATH.Caption = "保存パス;False;"
            Me.columnCLIENT_PC_NAME.Caption = "クライアントＰＣ名;False;"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewT_RESERVATIONRow() As T_RESERVATIONRow
            Return CType(Me.NewRow,T_RESERVATIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New T_RESERVATIONRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(T_RESERVATIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.T_RESERVATIONRowChangedEvent) Is Nothing) Then
                RaiseEvent T_RESERVATIONRowChanged(Me, New T_RESERVATIONRowChangeEvent(CType(e.Row,T_RESERVATIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.T_RESERVATIONRowChangingEvent) Is Nothing) Then
                RaiseEvent T_RESERVATIONRowChanging(Me, New T_RESERVATIONRowChangeEvent(CType(e.Row,T_RESERVATIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.T_RESERVATIONRowDeletedEvent) Is Nothing) Then
                RaiseEvent T_RESERVATIONRowDeleted(Me, New T_RESERVATIONRowChangeEvent(CType(e.Row,T_RESERVATIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.T_RESERVATIONRowDeletingEvent) Is Nothing) Then
                RaiseEvent T_RESERVATIONRowDeleting(Me, New T_RESERVATIONRowChangeEvent(CType(e.Row,T_RESERVATIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveT_RESERVATIONRow(ByVal row As T_RESERVATIONRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As SchemaRecordingReservation = New SchemaRecordingReservation
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "T_RESERVATIONDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class T_LOGDataTable
        Inherits Global.System.Data.TypedTableBase(Of T_LOGRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnMESSAGE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "T_LOG"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MESSAGEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMESSAGE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As T_LOGRow
            Get
                Return CType(Me.Rows(index),T_LOGRow)
            End Get
        End Property
        
        Public Event T_LOGRowChanging As T_LOGRowChangeEventHandler
        
        Public Event T_LOGRowChanged As T_LOGRowChangeEventHandler
        
        Public Event T_LOGRowDeleting As T_LOGRowChangeEventHandler
        
        Public Event T_LOGRowDeleted As T_LOGRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddT_LOGRow(ByVal row As T_LOGRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddT_LOGRow(ByVal ID As Long, ByVal MESSAGE As String) As T_LOGRow
            Dim rowT_LOGRow As T_LOGRow = CType(Me.NewRow,T_LOGRow)
            Dim columnValuesArray() As Object = New Object() {ID, MESSAGE}
            rowT_LOGRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowT_LOGRow)
            Return rowT_LOGRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As T_LOGDataTable = CType(MyBase.Clone,T_LOGDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New T_LOGDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnMESSAGE = MyBase.Columns("MESSAGE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnMESSAGE = New Global.System.Data.DataColumn("MESSAGE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMESSAGE)
            Me.columnID.Caption = "ＩＤ:False"
            Me.columnMESSAGE.Caption = "メッセージ:True"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewT_LOGRow() As T_LOGRow
            Return CType(Me.NewRow,T_LOGRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New T_LOGRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(T_LOGRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.T_LOGRowChangedEvent) Is Nothing) Then
                RaiseEvent T_LOGRowChanged(Me, New T_LOGRowChangeEvent(CType(e.Row,T_LOGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.T_LOGRowChangingEvent) Is Nothing) Then
                RaiseEvent T_LOGRowChanging(Me, New T_LOGRowChangeEvent(CType(e.Row,T_LOGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.T_LOGRowDeletedEvent) Is Nothing) Then
                RaiseEvent T_LOGRowDeleted(Me, New T_LOGRowChangeEvent(CType(e.Row,T_LOGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.T_LOGRowDeletingEvent) Is Nothing) Then
                RaiseEvent T_LOGRowDeleting(Me, New T_LOGRowChangeEvent(CType(e.Row,T_LOGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveT_LOGRow(ByVal row As T_LOGRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As SchemaRecordingReservation = New SchemaRecordingReservation
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "T_LOGDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class M_SETTINGDataTable
        Inherits Global.System.Data.TypedTableBase(Of M_SETTINGRow)
        
        Private columnPOWER_ON_INTERVAL_SECONDS As Global.System.Data.DataColumn
        
        Private columnEXE_BOOT_INTERVAL_SECONDS As Global.System.Data.DataColumn
        
        Private columnSTART_INTERVAL_SECONDS As Global.System.Data.DataColumn
        
        Private columnCHECK_START_INTERVAL_MINUTES As Global.System.Data.DataColumn
        
        Private columnOUTPUT_ERRORLOG As Global.System.Data.DataColumn
        
        Private columnEXIT_APPLICATION_AFTER_RECORDING As Global.System.Data.DataColumn
        
        Private columnPREVIEW As Global.System.Data.DataColumn
        
        Private columnSUSPEND_AFTER_RECORDING As Global.System.Data.DataColumn
        
        Private columnTVTEST_FULL_PATH As Global.System.Data.DataColumn
        
        Private columnSAVE_PATH As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "M_SETTING"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POWER_ON_INTERVAL_SECONDSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOWER_ON_INTERVAL_SECONDS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EXE_BOOT_INTERVAL_SECONDSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXE_BOOT_INTERVAL_SECONDS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property START_INTERVAL_SECONDSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTART_INTERVAL_SECONDS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CHECK_START_INTERVAL_MINUTESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCHECK_START_INTERVAL_MINUTES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OUTPUT_ERRORLOGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOUTPUT_ERRORLOG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EXIT_APPLICATION_AFTER_RECORDINGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXIT_APPLICATION_AFTER_RECORDING
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PREVIEWColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPREVIEW
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUSPEND_AFTER_RECORDINGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUSPEND_AFTER_RECORDING
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TVTEST_FULL_PATHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTVTEST_FULL_PATH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAVE_PATHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAVE_PATH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As M_SETTINGRow
            Get
                Return CType(Me.Rows(index),M_SETTINGRow)
            End Get
        End Property
        
        Public Event M_SETTINGRowChanging As M_SETTINGRowChangeEventHandler
        
        Public Event M_SETTINGRowChanged As M_SETTINGRowChangeEventHandler
        
        Public Event M_SETTINGRowDeleting As M_SETTINGRowChangeEventHandler
        
        Public Event M_SETTINGRowDeleted As M_SETTINGRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddM_SETTINGRow(ByVal row As M_SETTINGRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddM_SETTINGRow(ByVal POWER_ON_INTERVAL_SECONDS As Long, ByVal EXE_BOOT_INTERVAL_SECONDS As Long, ByVal START_INTERVAL_SECONDS As Long, ByVal CHECK_START_INTERVAL_MINUTES As Long, ByVal OUTPUT_ERRORLOG As Long, ByVal EXIT_APPLICATION_AFTER_RECORDING As Long, ByVal PREVIEW As Long, ByVal SUSPEND_AFTER_RECORDING As Long, ByVal TVTEST_FULL_PATH As String, ByVal SAVE_PATH As String) As M_SETTINGRow
            Dim rowM_SETTINGRow As M_SETTINGRow = CType(Me.NewRow,M_SETTINGRow)
            Dim columnValuesArray() As Object = New Object() {POWER_ON_INTERVAL_SECONDS, EXE_BOOT_INTERVAL_SECONDS, START_INTERVAL_SECONDS, CHECK_START_INTERVAL_MINUTES, OUTPUT_ERRORLOG, EXIT_APPLICATION_AFTER_RECORDING, PREVIEW, SUSPEND_AFTER_RECORDING, TVTEST_FULL_PATH, SAVE_PATH}
            rowM_SETTINGRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowM_SETTINGRow)
            Return rowM_SETTINGRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As M_SETTINGDataTable = CType(MyBase.Clone,M_SETTINGDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New M_SETTINGDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPOWER_ON_INTERVAL_SECONDS = MyBase.Columns("POWER_ON_INTERVAL_SECONDS")
            Me.columnEXE_BOOT_INTERVAL_SECONDS = MyBase.Columns("EXE_BOOT_INTERVAL_SECONDS")
            Me.columnSTART_INTERVAL_SECONDS = MyBase.Columns("START_INTERVAL_SECONDS")
            Me.columnCHECK_START_INTERVAL_MINUTES = MyBase.Columns("CHECK_START_INTERVAL_MINUTES")
            Me.columnOUTPUT_ERRORLOG = MyBase.Columns("OUTPUT_ERRORLOG")
            Me.columnEXIT_APPLICATION_AFTER_RECORDING = MyBase.Columns("EXIT_APPLICATION_AFTER_RECORDING")
            Me.columnPREVIEW = MyBase.Columns("PREVIEW")
            Me.columnSUSPEND_AFTER_RECORDING = MyBase.Columns("SUSPEND_AFTER_RECORDING")
            Me.columnTVTEST_FULL_PATH = MyBase.Columns("TVTEST_FULL_PATH")
            Me.columnSAVE_PATH = MyBase.Columns("SAVE_PATH")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPOWER_ON_INTERVAL_SECONDS = New Global.System.Data.DataColumn("POWER_ON_INTERVAL_SECONDS", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOWER_ON_INTERVAL_SECONDS)
            Me.columnEXE_BOOT_INTERVAL_SECONDS = New Global.System.Data.DataColumn("EXE_BOOT_INTERVAL_SECONDS", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXE_BOOT_INTERVAL_SECONDS)
            Me.columnSTART_INTERVAL_SECONDS = New Global.System.Data.DataColumn("START_INTERVAL_SECONDS", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTART_INTERVAL_SECONDS)
            Me.columnCHECK_START_INTERVAL_MINUTES = New Global.System.Data.DataColumn("CHECK_START_INTERVAL_MINUTES", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCHECK_START_INTERVAL_MINUTES)
            Me.columnOUTPUT_ERRORLOG = New Global.System.Data.DataColumn("OUTPUT_ERRORLOG", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOUTPUT_ERRORLOG)
            Me.columnEXIT_APPLICATION_AFTER_RECORDING = New Global.System.Data.DataColumn("EXIT_APPLICATION_AFTER_RECORDING", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXIT_APPLICATION_AFTER_RECORDING)
            Me.columnPREVIEW = New Global.System.Data.DataColumn("PREVIEW", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPREVIEW)
            Me.columnSUSPEND_AFTER_RECORDING = New Global.System.Data.DataColumn("SUSPEND_AFTER_RECORDING", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUSPEND_AFTER_RECORDING)
            Me.columnTVTEST_FULL_PATH = New Global.System.Data.DataColumn("TVTEST_FULL_PATH", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTVTEST_FULL_PATH)
            Me.columnSAVE_PATH = New Global.System.Data.DataColumn("SAVE_PATH", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAVE_PATH)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewM_SETTINGRow() As M_SETTINGRow
            Return CType(Me.NewRow,M_SETTINGRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New M_SETTINGRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(M_SETTINGRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.M_SETTINGRowChangedEvent) Is Nothing) Then
                RaiseEvent M_SETTINGRowChanged(Me, New M_SETTINGRowChangeEvent(CType(e.Row,M_SETTINGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.M_SETTINGRowChangingEvent) Is Nothing) Then
                RaiseEvent M_SETTINGRowChanging(Me, New M_SETTINGRowChangeEvent(CType(e.Row,M_SETTINGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.M_SETTINGRowDeletedEvent) Is Nothing) Then
                RaiseEvent M_SETTINGRowDeleted(Me, New M_SETTINGRowChangeEvent(CType(e.Row,M_SETTINGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.M_SETTINGRowDeletingEvent) Is Nothing) Then
                RaiseEvent M_SETTINGRowDeleting(Me, New M_SETTINGRowChangeEvent(CType(e.Row,M_SETTINGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveM_SETTINGRow(ByVal row As M_SETTINGRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As SchemaRecordingReservation = New SchemaRecordingReservation
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "M_SETTINGDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class M_DEVICEDataTable
        Inherits Global.System.Data.TypedTableBase(Of M_DEVICERow)
        
        Private columnDLL_NAME As Global.System.Data.DataColumn
        
        Private columnPRIORITY As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "M_DEVICE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DLL_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDLL_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRIORITYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRIORITY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As M_DEVICERow
            Get
                Return CType(Me.Rows(index),M_DEVICERow)
            End Get
        End Property
        
        Public Event M_DEVICERowChanging As M_DEVICERowChangeEventHandler
        
        Public Event M_DEVICERowChanged As M_DEVICERowChangeEventHandler
        
        Public Event M_DEVICERowDeleting As M_DEVICERowChangeEventHandler
        
        Public Event M_DEVICERowDeleted As M_DEVICERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddM_DEVICERow(ByVal row As M_DEVICERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddM_DEVICERow(ByVal DLL_NAME As String, ByVal PRIORITY As Long) As M_DEVICERow
            Dim rowM_DEVICERow As M_DEVICERow = CType(Me.NewRow,M_DEVICERow)
            Dim columnValuesArray() As Object = New Object() {DLL_NAME, PRIORITY}
            rowM_DEVICERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowM_DEVICERow)
            Return rowM_DEVICERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As M_DEVICEDataTable = CType(MyBase.Clone,M_DEVICEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New M_DEVICEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDLL_NAME = MyBase.Columns("DLL_NAME")
            Me.columnPRIORITY = MyBase.Columns("PRIORITY")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDLL_NAME = New Global.System.Data.DataColumn("DLL_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDLL_NAME)
            Me.columnPRIORITY = New Global.System.Data.DataColumn("PRIORITY", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRIORITY)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewM_DEVICERow() As M_DEVICERow
            Return CType(Me.NewRow,M_DEVICERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New M_DEVICERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(M_DEVICERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.M_DEVICERowChangedEvent) Is Nothing) Then
                RaiseEvent M_DEVICERowChanged(Me, New M_DEVICERowChangeEvent(CType(e.Row,M_DEVICERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.M_DEVICERowChangingEvent) Is Nothing) Then
                RaiseEvent M_DEVICERowChanging(Me, New M_DEVICERowChangeEvent(CType(e.Row,M_DEVICERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.M_DEVICERowDeletedEvent) Is Nothing) Then
                RaiseEvent M_DEVICERowDeleted(Me, New M_DEVICERowChangeEvent(CType(e.Row,M_DEVICERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.M_DEVICERowDeletingEvent) Is Nothing) Then
                RaiseEvent M_DEVICERowDeleting(Me, New M_DEVICERowChangeEvent(CType(e.Row,M_DEVICERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveM_DEVICERow(ByVal row As M_DEVICERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As SchemaRecordingReservation = New SchemaRecordingReservation
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "M_DEVICEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class M_STATIONDataTable
        Inherits Global.System.Data.TypedTableBase(Of M_STATIONRow)
        
        Private columnCHANNEL As Global.System.Data.DataColumn
        
        Private columnSERVICE_ID As Global.System.Data.DataColumn
        
        Private columnSTATION As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "M_STATION"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CHANNELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCHANNEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SERVICE_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSERVICE_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STATIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTATION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As M_STATIONRow
            Get
                Return CType(Me.Rows(index),M_STATIONRow)
            End Get
        End Property
        
        Public Event M_STATIONRowChanging As M_STATIONRowChangeEventHandler
        
        Public Event M_STATIONRowChanged As M_STATIONRowChangeEventHandler
        
        Public Event M_STATIONRowDeleting As M_STATIONRowChangeEventHandler
        
        Public Event M_STATIONRowDeleted As M_STATIONRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddM_STATIONRow(ByVal row As M_STATIONRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddM_STATIONRow(ByVal CHANNEL As Long, ByVal SERVICE_ID As Long, ByVal STATION As String) As M_STATIONRow
            Dim rowM_STATIONRow As M_STATIONRow = CType(Me.NewRow,M_STATIONRow)
            Dim columnValuesArray() As Object = New Object() {CHANNEL, SERVICE_ID, STATION}
            rowM_STATIONRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowM_STATIONRow)
            Return rowM_STATIONRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As M_STATIONDataTable = CType(MyBase.Clone,M_STATIONDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New M_STATIONDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCHANNEL = MyBase.Columns("CHANNEL")
            Me.columnSERVICE_ID = MyBase.Columns("SERVICE_ID")
            Me.columnSTATION = MyBase.Columns("STATION")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCHANNEL = New Global.System.Data.DataColumn("CHANNEL", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCHANNEL)
            Me.columnSERVICE_ID = New Global.System.Data.DataColumn("SERVICE_ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSERVICE_ID)
            Me.columnSTATION = New Global.System.Data.DataColumn("STATION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTATION)
            Me.columnCHANNEL.Caption = "チャンネル;True;"
            Me.columnSERVICE_ID.Caption = "サブch;True;"
            Me.columnSTATION.Caption = "放送局名;True;"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewM_STATIONRow() As M_STATIONRow
            Return CType(Me.NewRow,M_STATIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New M_STATIONRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(M_STATIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.M_STATIONRowChangedEvent) Is Nothing) Then
                RaiseEvent M_STATIONRowChanged(Me, New M_STATIONRowChangeEvent(CType(e.Row,M_STATIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.M_STATIONRowChangingEvent) Is Nothing) Then
                RaiseEvent M_STATIONRowChanging(Me, New M_STATIONRowChangeEvent(CType(e.Row,M_STATIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.M_STATIONRowDeletedEvent) Is Nothing) Then
                RaiseEvent M_STATIONRowDeleted(Me, New M_STATIONRowChangeEvent(CType(e.Row,M_STATIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.M_STATIONRowDeletingEvent) Is Nothing) Then
                RaiseEvent M_STATIONRowDeleting(Me, New M_STATIONRowChangeEvent(CType(e.Row,M_STATIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveM_STATIONRow(ByVal row As M_STATIONRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As SchemaRecordingReservation = New SchemaRecordingReservation
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "M_STATIONDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class T_RESERVATIONRow
        Inherits Global.System.Data.DataRow
        
        Private tableT_RESERVATION As T_RESERVATIONDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableT_RESERVATION = CType(Me.Table,T_RESERVATIONDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Long
            Get
                If Me.IsIDNull Then
                    Return 0
                Else
                    Return CType(Me(Me.tableT_RESERVATION.IDColumn),Long)
                End If
            End Get
            Set
                Me(Me.tableT_RESERVATION.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DLL_NAME() As String
            Get
                If Me.IsDLL_NAMENull Then
                    Return ""
                Else
                    Return CType(Me(Me.tableT_RESERVATION.DLL_NAMEColumn),String)
                End If
            End Get
            Set
                Me(Me.tableT_RESERVATION.DLL_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BROADCAST_TYPE() As Long
            Get
                If Me.IsBROADCAST_TYPENull Then
                    Return 0
                Else
                    Return CType(Me(Me.tableT_RESERVATION.BROADCAST_TYPEColumn),Long)
                End If
            End Get
            Set
                Me(Me.tableT_RESERVATION.BROADCAST_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STATION() As String
            Get
                If Me.IsSTATIONNull Then
                    Return ""
                Else
                    Return CType(Me(Me.tableT_RESERVATION.STATIONColumn),String)
                End If
            End Get
            Set
                Me(Me.tableT_RESERVATION.STATIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STATION_NAME() As String
            Get
                If Me.IsSTATION_NAMENull Then
                    Return ""
                Else
                    Return CType(Me(Me.tableT_RESERVATION.STATION_NAMEColumn),String)
                End If
            End Get
            Set
                Me(Me.tableT_RESERVATION.STATION_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CHANNEL() As Long
            Get
                If Me.IsCHANNELNull Then
                    Return 0
                Else
                    Return CType(Me(Me.tableT_RESERVATION.CHANNELColumn),Long)
                End If
            End Get
            Set
                Me(Me.tableT_RESERVATION.CHANNELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SERVICE_ID() As Long
            Get
                If Me.IsSERVICE_IDNull Then
                    Return 0
                Else
                    Return CType(Me(Me.tableT_RESERVATION.SERVICE_IDColumn),Long)
                End If
            End Get
            Set
                Me(Me.tableT_RESERVATION.SERVICE_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property START_YYYYMMDDHHMM() As String
            Get
                If Me.IsSTART_YYYYMMDDHHMMNull Then
                    Return ""
                Else
                    Return CType(Me(Me.tableT_RESERVATION.START_YYYYMMDDHHMMColumn),String)
                End If
            End Get
            Set
                Me(Me.tableT_RESERVATION.START_YYYYMMDDHHMMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property START_DISP() As String
            Get
                If Me.IsSTART_DISPNull Then
                    Return ""
                Else
                    Return CType(Me(Me.tableT_RESERVATION.START_DISPColumn),String)
                End If
            End Get
            Set
                Me(Me.tableT_RESERVATION.START_DISPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property END_YYYYMMDDHHMM() As String
            Get
                If Me.IsEND_YYYYMMDDHHMMNull Then
                    Return ""
                Else
                    Return CType(Me(Me.tableT_RESERVATION.END_YYYYMMDDHHMMColumn),String)
                End If
            End Get
            Set
                Me(Me.tableT_RESERVATION.END_YYYYMMDDHHMMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property END_DISP() As String
            Get
                If Me.IsEND_DISPNull Then
                    Return ""
                Else
                    Return CType(Me(Me.tableT_RESERVATION.END_DISPColumn),String)
                End If
            End Get
            Set
                Me(Me.tableT_RESERVATION.END_DISPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROGRAM_TITLE() As String
            Get
                If Me.IsPROGRAM_TITLENull Then
                    Return ""
                Else
                    Return CType(Me(Me.tableT_RESERVATION.PROGRAM_TITLEColumn),String)
                End If
            End Get
            Set
                Me(Me.tableT_RESERVATION.PROGRAM_TITLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROGRAM_SUBTITLE() As String
            Get
                If Me.IsPROGRAM_SUBTITLENull Then
                    Return ""
                Else
                    Return CType(Me(Me.tableT_RESERVATION.PROGRAM_SUBTITLEColumn),String)
                End If
            End Get
            Set
                Me(Me.tableT_RESERVATION.PROGRAM_SUBTITLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EXTEND() As Long
            Get
                If Me.IsEXTENDNull Then
                    Return 0
                Else
                    Return CType(Me(Me.tableT_RESERVATION.EXTENDColumn),Long)
                End If
            End Get
            Set
                Me(Me.tableT_RESERVATION.EXTENDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PERFORMER() As String
            Get
                If Me.IsPERFORMERNull Then
                    Return ""
                Else
                    Return CType(Me(Me.tableT_RESERVATION.PERFORMERColumn),String)
                End If
            End Get
            Set
                Me(Me.tableT_RESERVATION.PERFORMERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GENRE() As Long
            Get
                If Me.IsGENRENull Then
                    Return 0
                Else
                    Return CType(Me(Me.tableT_RESERVATION.GENREColumn),Long)
                End If
            End Get
            Set
                Me(Me.tableT_RESERVATION.GENREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUBGENRE() As Long
            Get
                If Me.IsSUBGENRENull Then
                    Return 0
                Else
                    Return CType(Me(Me.tableT_RESERVATION.SUBGENREColumn),Long)
                End If
            End Get
            Set
                Me(Me.tableT_RESERVATION.SUBGENREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NOTE() As String
            Get
                If Me.IsNOTENull Then
                    Return ""
                Else
                    Return CType(Me(Me.tableT_RESERVATION.NOTEColumn),String)
                End If
            End Get
            Set
                Me(Me.tableT_RESERVATION.NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RECORDED() As Long
            Get
                If Me.IsRECORDEDNull Then
                    Return 0
                Else
                    Return CType(Me(Me.tableT_RESERVATION.RECORDEDColumn),Long)
                End If
            End Get
            Set
                Me(Me.tableT_RESERVATION.RECORDEDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OUTPUT_ERRORLOG() As Long
            Get
                If Me.IsOUTPUT_ERRORLOGNull Then
                    Return 0
                Else
                    Return CType(Me(Me.tableT_RESERVATION.OUTPUT_ERRORLOGColumn),Long)
                End If
            End Get
            Set
                Me(Me.tableT_RESERVATION.OUTPUT_ERRORLOGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EXIT_APPLICATION_AFTER_RECORDING() As Long
            Get
                If Me.IsEXIT_APPLICATION_AFTER_RECORDINGNull Then
                    Return 0
                Else
                    Return CType(Me(Me.tableT_RESERVATION.EXIT_APPLICATION_AFTER_RECORDINGColumn),Long)
                End If
            End Get
            Set
                Me(Me.tableT_RESERVATION.EXIT_APPLICATION_AFTER_RECORDINGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PREVIEW() As Long
            Get
                If Me.IsPREVIEWNull Then
                    Return 0
                Else
                    Return CType(Me(Me.tableT_RESERVATION.PREVIEWColumn),Long)
                End If
            End Get
            Set
                Me(Me.tableT_RESERVATION.PREVIEWColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUSPEND_AFTER_RECORDING() As Long
            Get
                If Me.IsSUSPEND_AFTER_RECORDINGNull Then
                    Return 0
                Else
                    Return CType(Me(Me.tableT_RESERVATION.SUSPEND_AFTER_RECORDINGColumn),Long)
                End If
            End Get
            Set
                Me(Me.tableT_RESERVATION.SUSPEND_AFTER_RECORDINGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PATH() As String
            Get
                If Me.IsPATHNull Then
                    Return ""
                Else
                    Return CType(Me(Me.tableT_RESERVATION.PATHColumn),String)
                End If
            End Get
            Set
                Me(Me.tableT_RESERVATION.PATHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENT_PC_NAME() As String
            Get
                If Me.IsCLIENT_PC_NAMENull Then
                    Return ""
                Else
                    Return CType(Me(Me.tableT_RESERVATION.CLIENT_PC_NAMEColumn),String)
                End If
            End Get
            Set
                Me(Me.tableT_RESERVATION.CLIENT_PC_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tableT_RESERVATION.IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDNull()
            Me(Me.tableT_RESERVATION.IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDLL_NAMENull() As Boolean
            Return Me.IsNull(Me.tableT_RESERVATION.DLL_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDLL_NAMENull()
            Me(Me.tableT_RESERVATION.DLL_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBROADCAST_TYPENull() As Boolean
            Return Me.IsNull(Me.tableT_RESERVATION.BROADCAST_TYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBROADCAST_TYPENull()
            Me(Me.tableT_RESERVATION.BROADCAST_TYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTATIONNull() As Boolean
            Return Me.IsNull(Me.tableT_RESERVATION.STATIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTATIONNull()
            Me(Me.tableT_RESERVATION.STATIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTATION_NAMENull() As Boolean
            Return Me.IsNull(Me.tableT_RESERVATION.STATION_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTATION_NAMENull()
            Me(Me.tableT_RESERVATION.STATION_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCHANNELNull() As Boolean
            Return Me.IsNull(Me.tableT_RESERVATION.CHANNELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCHANNELNull()
            Me(Me.tableT_RESERVATION.CHANNELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSERVICE_IDNull() As Boolean
            Return Me.IsNull(Me.tableT_RESERVATION.SERVICE_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSERVICE_IDNull()
            Me(Me.tableT_RESERVATION.SERVICE_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTART_YYYYMMDDHHMMNull() As Boolean
            Return Me.IsNull(Me.tableT_RESERVATION.START_YYYYMMDDHHMMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTART_YYYYMMDDHHMMNull()
            Me(Me.tableT_RESERVATION.START_YYYYMMDDHHMMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTART_DISPNull() As Boolean
            Return Me.IsNull(Me.tableT_RESERVATION.START_DISPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTART_DISPNull()
            Me(Me.tableT_RESERVATION.START_DISPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEND_YYYYMMDDHHMMNull() As Boolean
            Return Me.IsNull(Me.tableT_RESERVATION.END_YYYYMMDDHHMMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEND_YYYYMMDDHHMMNull()
            Me(Me.tableT_RESERVATION.END_YYYYMMDDHHMMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEND_DISPNull() As Boolean
            Return Me.IsNull(Me.tableT_RESERVATION.END_DISPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEND_DISPNull()
            Me(Me.tableT_RESERVATION.END_DISPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPROGRAM_TITLENull() As Boolean
            Return Me.IsNull(Me.tableT_RESERVATION.PROGRAM_TITLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPROGRAM_TITLENull()
            Me(Me.tableT_RESERVATION.PROGRAM_TITLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPROGRAM_SUBTITLENull() As Boolean
            Return Me.IsNull(Me.tableT_RESERVATION.PROGRAM_SUBTITLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPROGRAM_SUBTITLENull()
            Me(Me.tableT_RESERVATION.PROGRAM_SUBTITLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEXTENDNull() As Boolean
            Return Me.IsNull(Me.tableT_RESERVATION.EXTENDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEXTENDNull()
            Me(Me.tableT_RESERVATION.EXTENDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPERFORMERNull() As Boolean
            Return Me.IsNull(Me.tableT_RESERVATION.PERFORMERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPERFORMERNull()
            Me(Me.tableT_RESERVATION.PERFORMERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGENRENull() As Boolean
            Return Me.IsNull(Me.tableT_RESERVATION.GENREColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGENRENull()
            Me(Me.tableT_RESERVATION.GENREColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUBGENRENull() As Boolean
            Return Me.IsNull(Me.tableT_RESERVATION.SUBGENREColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUBGENRENull()
            Me(Me.tableT_RESERVATION.SUBGENREColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNOTENull() As Boolean
            Return Me.IsNull(Me.tableT_RESERVATION.NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNOTENull()
            Me(Me.tableT_RESERVATION.NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRECORDEDNull() As Boolean
            Return Me.IsNull(Me.tableT_RESERVATION.RECORDEDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRECORDEDNull()
            Me(Me.tableT_RESERVATION.RECORDEDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOUTPUT_ERRORLOGNull() As Boolean
            Return Me.IsNull(Me.tableT_RESERVATION.OUTPUT_ERRORLOGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOUTPUT_ERRORLOGNull()
            Me(Me.tableT_RESERVATION.OUTPUT_ERRORLOGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEXIT_APPLICATION_AFTER_RECORDINGNull() As Boolean
            Return Me.IsNull(Me.tableT_RESERVATION.EXIT_APPLICATION_AFTER_RECORDINGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEXIT_APPLICATION_AFTER_RECORDINGNull()
            Me(Me.tableT_RESERVATION.EXIT_APPLICATION_AFTER_RECORDINGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPREVIEWNull() As Boolean
            Return Me.IsNull(Me.tableT_RESERVATION.PREVIEWColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPREVIEWNull()
            Me(Me.tableT_RESERVATION.PREVIEWColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUSPEND_AFTER_RECORDINGNull() As Boolean
            Return Me.IsNull(Me.tableT_RESERVATION.SUSPEND_AFTER_RECORDINGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUSPEND_AFTER_RECORDINGNull()
            Me(Me.tableT_RESERVATION.SUSPEND_AFTER_RECORDINGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPATHNull() As Boolean
            Return Me.IsNull(Me.tableT_RESERVATION.PATHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPATHNull()
            Me(Me.tableT_RESERVATION.PATHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENT_PC_NAMENull() As Boolean
            Return Me.IsNull(Me.tableT_RESERVATION.CLIENT_PC_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENT_PC_NAMENull()
            Me(Me.tableT_RESERVATION.CLIENT_PC_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class T_LOGRow
        Inherits Global.System.Data.DataRow
        
        Private tableT_LOG As T_LOGDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableT_LOG = CType(Me.Table,T_LOGDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Long
            Get
                If Me.IsIDNull Then
                    Return 0
                Else
                    Return CType(Me(Me.tableT_LOG.IDColumn),Long)
                End If
            End Get
            Set
                Me(Me.tableT_LOG.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MESSAGE() As String
            Get
                If Me.IsMESSAGENull Then
                    Return ""
                Else
                    Return CType(Me(Me.tableT_LOG.MESSAGEColumn),String)
                End If
            End Get
            Set
                Me(Me.tableT_LOG.MESSAGEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tableT_LOG.IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDNull()
            Me(Me.tableT_LOG.IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMESSAGENull() As Boolean
            Return Me.IsNull(Me.tableT_LOG.MESSAGEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMESSAGENull()
            Me(Me.tableT_LOG.MESSAGEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class M_SETTINGRow
        Inherits Global.System.Data.DataRow
        
        Private tableM_SETTING As M_SETTINGDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableM_SETTING = CType(Me.Table,M_SETTINGDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POWER_ON_INTERVAL_SECONDS() As Long
            Get
                If Me.IsPOWER_ON_INTERVAL_SECONDSNull Then
                    Return 0
                Else
                    Return CType(Me(Me.tableM_SETTING.POWER_ON_INTERVAL_SECONDSColumn),Long)
                End If
            End Get
            Set
                Me(Me.tableM_SETTING.POWER_ON_INTERVAL_SECONDSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EXE_BOOT_INTERVAL_SECONDS() As Long
            Get
                If Me.IsEXE_BOOT_INTERVAL_SECONDSNull Then
                    Return 0
                Else
                    Return CType(Me(Me.tableM_SETTING.EXE_BOOT_INTERVAL_SECONDSColumn),Long)
                End If
            End Get
            Set
                Me(Me.tableM_SETTING.EXE_BOOT_INTERVAL_SECONDSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property START_INTERVAL_SECONDS() As Long
            Get
                If Me.IsSTART_INTERVAL_SECONDSNull Then
                    Return 0
                Else
                    Return CType(Me(Me.tableM_SETTING.START_INTERVAL_SECONDSColumn),Long)
                End If
            End Get
            Set
                Me(Me.tableM_SETTING.START_INTERVAL_SECONDSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CHECK_START_INTERVAL_MINUTES() As Long
            Get
                If Me.IsCHECK_START_INTERVAL_MINUTESNull Then
                    Return 0
                Else
                    Return CType(Me(Me.tableM_SETTING.CHECK_START_INTERVAL_MINUTESColumn),Long)
                End If
            End Get
            Set
                Me(Me.tableM_SETTING.CHECK_START_INTERVAL_MINUTESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OUTPUT_ERRORLOG() As Long
            Get
                If Me.IsOUTPUT_ERRORLOGNull Then
                    Return 0
                Else
                    Return CType(Me(Me.tableM_SETTING.OUTPUT_ERRORLOGColumn),Long)
                End If
            End Get
            Set
                Me(Me.tableM_SETTING.OUTPUT_ERRORLOGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EXIT_APPLICATION_AFTER_RECORDING() As Long
            Get
                If Me.IsEXIT_APPLICATION_AFTER_RECORDINGNull Then
                    Return 0
                Else
                    Return CType(Me(Me.tableM_SETTING.EXIT_APPLICATION_AFTER_RECORDINGColumn),Long)
                End If
            End Get
            Set
                Me(Me.tableM_SETTING.EXIT_APPLICATION_AFTER_RECORDINGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PREVIEW() As Long
            Get
                If Me.IsPREVIEWNull Then
                    Return 0
                Else
                    Return CType(Me(Me.tableM_SETTING.PREVIEWColumn),Long)
                End If
            End Get
            Set
                Me(Me.tableM_SETTING.PREVIEWColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUSPEND_AFTER_RECORDING() As Long
            Get
                If Me.IsSUSPEND_AFTER_RECORDINGNull Then
                    Return 0
                Else
                    Return CType(Me(Me.tableM_SETTING.SUSPEND_AFTER_RECORDINGColumn),Long)
                End If
            End Get
            Set
                Me(Me.tableM_SETTING.SUSPEND_AFTER_RECORDINGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TVTEST_FULL_PATH() As String
            Get
                If Me.IsTVTEST_FULL_PATHNull Then
                    Return ""
                Else
                    Return CType(Me(Me.tableM_SETTING.TVTEST_FULL_PATHColumn),String)
                End If
            End Get
            Set
                Me(Me.tableM_SETTING.TVTEST_FULL_PATHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAVE_PATH() As String
            Get
                If Me.IsSAVE_PATHNull Then
                    Return ""
                Else
                    Return CType(Me(Me.tableM_SETTING.SAVE_PATHColumn),String)
                End If
            End Get
            Set
                Me(Me.tableM_SETTING.SAVE_PATHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOWER_ON_INTERVAL_SECONDSNull() As Boolean
            Return Me.IsNull(Me.tableM_SETTING.POWER_ON_INTERVAL_SECONDSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOWER_ON_INTERVAL_SECONDSNull()
            Me(Me.tableM_SETTING.POWER_ON_INTERVAL_SECONDSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEXE_BOOT_INTERVAL_SECONDSNull() As Boolean
            Return Me.IsNull(Me.tableM_SETTING.EXE_BOOT_INTERVAL_SECONDSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEXE_BOOT_INTERVAL_SECONDSNull()
            Me(Me.tableM_SETTING.EXE_BOOT_INTERVAL_SECONDSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTART_INTERVAL_SECONDSNull() As Boolean
            Return Me.IsNull(Me.tableM_SETTING.START_INTERVAL_SECONDSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTART_INTERVAL_SECONDSNull()
            Me(Me.tableM_SETTING.START_INTERVAL_SECONDSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCHECK_START_INTERVAL_MINUTESNull() As Boolean
            Return Me.IsNull(Me.tableM_SETTING.CHECK_START_INTERVAL_MINUTESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCHECK_START_INTERVAL_MINUTESNull()
            Me(Me.tableM_SETTING.CHECK_START_INTERVAL_MINUTESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOUTPUT_ERRORLOGNull() As Boolean
            Return Me.IsNull(Me.tableM_SETTING.OUTPUT_ERRORLOGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOUTPUT_ERRORLOGNull()
            Me(Me.tableM_SETTING.OUTPUT_ERRORLOGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEXIT_APPLICATION_AFTER_RECORDINGNull() As Boolean
            Return Me.IsNull(Me.tableM_SETTING.EXIT_APPLICATION_AFTER_RECORDINGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEXIT_APPLICATION_AFTER_RECORDINGNull()
            Me(Me.tableM_SETTING.EXIT_APPLICATION_AFTER_RECORDINGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPREVIEWNull() As Boolean
            Return Me.IsNull(Me.tableM_SETTING.PREVIEWColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPREVIEWNull()
            Me(Me.tableM_SETTING.PREVIEWColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUSPEND_AFTER_RECORDINGNull() As Boolean
            Return Me.IsNull(Me.tableM_SETTING.SUSPEND_AFTER_RECORDINGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUSPEND_AFTER_RECORDINGNull()
            Me(Me.tableM_SETTING.SUSPEND_AFTER_RECORDINGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTVTEST_FULL_PATHNull() As Boolean
            Return Me.IsNull(Me.tableM_SETTING.TVTEST_FULL_PATHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTVTEST_FULL_PATHNull()
            Me(Me.tableM_SETTING.TVTEST_FULL_PATHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSAVE_PATHNull() As Boolean
            Return Me.IsNull(Me.tableM_SETTING.SAVE_PATHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSAVE_PATHNull()
            Me(Me.tableM_SETTING.SAVE_PATHColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class M_DEVICERow
        Inherits Global.System.Data.DataRow
        
        Private tableM_DEVICE As M_DEVICEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableM_DEVICE = CType(Me.Table,M_DEVICEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DLL_NAME() As String
            Get
                If Me.IsDLL_NAMENull Then
                    Return ""
                Else
                    Return CType(Me(Me.tableM_DEVICE.DLL_NAMEColumn),String)
                End If
            End Get
            Set
                Me(Me.tableM_DEVICE.DLL_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRIORITY() As Long
            Get
                If Me.IsPRIORITYNull Then
                    Return 0
                Else
                    Return CType(Me(Me.tableM_DEVICE.PRIORITYColumn),Long)
                End If
            End Get
            Set
                Me(Me.tableM_DEVICE.PRIORITYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDLL_NAMENull() As Boolean
            Return Me.IsNull(Me.tableM_DEVICE.DLL_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDLL_NAMENull()
            Me(Me.tableM_DEVICE.DLL_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRIORITYNull() As Boolean
            Return Me.IsNull(Me.tableM_DEVICE.PRIORITYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRIORITYNull()
            Me(Me.tableM_DEVICE.PRIORITYColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class M_STATIONRow
        Inherits Global.System.Data.DataRow
        
        Private tableM_STATION As M_STATIONDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableM_STATION = CType(Me.Table,M_STATIONDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CHANNEL() As Long
            Get
                If Me.IsCHANNELNull Then
                    Return 0
                Else
                    Return CType(Me(Me.tableM_STATION.CHANNELColumn),Long)
                End If
            End Get
            Set
                Me(Me.tableM_STATION.CHANNELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SERVICE_ID() As Long
            Get
                If Me.IsSERVICE_IDNull Then
                    Return 0
                Else
                    Return CType(Me(Me.tableM_STATION.SERVICE_IDColumn),Long)
                End If
            End Get
            Set
                Me(Me.tableM_STATION.SERVICE_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STATION() As String
            Get
                If Me.IsSTATIONNull Then
                    Return ""
                Else
                    Return CType(Me(Me.tableM_STATION.STATIONColumn),String)
                End If
            End Get
            Set
                Me(Me.tableM_STATION.STATIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCHANNELNull() As Boolean
            Return Me.IsNull(Me.tableM_STATION.CHANNELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCHANNELNull()
            Me(Me.tableM_STATION.CHANNELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSERVICE_IDNull() As Boolean
            Return Me.IsNull(Me.tableM_STATION.SERVICE_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSERVICE_IDNull()
            Me(Me.tableM_STATION.SERVICE_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTATIONNull() As Boolean
            Return Me.IsNull(Me.tableM_STATION.STATIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTATIONNull()
            Me(Me.tableM_STATION.STATIONColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class T_RESERVATIONRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As T_RESERVATIONRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As T_RESERVATIONRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As T_RESERVATIONRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class T_LOGRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As T_LOGRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As T_LOGRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As T_LOGRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class M_SETTINGRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As M_SETTINGRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As M_SETTINGRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As M_SETTINGRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class M_DEVICERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As M_DEVICERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As M_DEVICERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As M_DEVICERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class M_STATIONRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As M_STATIONRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As M_STATIONRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As M_STATIONRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
